// Objeto contendo refer√™ncias aos elementos do DOM
const elements = {
    buttonSearch: document.getElementById("buttonSearch"), // Seleciona o elemento do DOM com o ID "buttonSearch" e armazena-o na propriedade "buttonSearch" do objeto "elements"
    buttonRemove: document.getElementById("buttonRemove"), // Seleciona o elemento do DOM com o ID "buttonRemove" e armazena-o na propriedade "buttonRemove" do objeto "elements"
    username: document.getElementById("username"), // Seleciona o elemento do DOM com o ID "username" e armazena-o na propriedade "username" do objeto "elements"
    email: document.getElementById("email"), // Seleciona o elemento do DOM com o ID "email" e armazena-o na propriedade "email" do objeto "elements"
    textLog: document.getElementById("textLog"), // Seleciona o elemento do DOM com o ID "textLog" e armazena-o na propriedade "textLog" do objeto "elements"
    textLog2: document.getElementById('textLog2'), // Seleciona o elemento do DOM com o ID "textLog2" e armazena-o na propriedade "textLog" do objeto "elements"
    loginButton: document.getElementById("linkButton"), // Seleciona o elemento do DOM com o ID "loginButtonn" e armazena-o na propriedade "loginButton" do objeto "elements"
    };

// Fun√ß√£o para mostrar mensagens de erro
function showError(message) {
    elements.textLog.style.color = "red"; // Define a cor do texto do elemento "textLog" para vermelho
    elements.textLog.innerHTML = message; // Define o conte√∫do do elemento "textLog" como a mensagem de erro fornecida
    }

    // Fun√ß√£o para mostrar mensagens de sucesso
function showSuccess(message) {
    elements.textLog.style.color = "green"; // Define a cor do texto do elemento "textLog" para verde
    elements.textLog.innerHTML = message; // Define o conte√∫do do elemento "textLog" como a mensagem de sucesso fornecida
    }
    // Fun√ß√£o para mostrar mensagens de sucesso
function showAlert(message) {
    elements.textLog2.style.color = "yellow"; // Define a cor do texto do elemento "textLog2" para amarelo
    elements.textLog2.innerHTML = message; // Define o conte√∫do do elemento "textLog2" como a mensagem de alerta fornecida
    }


    async function searchUser(e) {
        // Retira o evento padr√£o do bot√£o
        e.preventDefault();
    
        const usernameInput = elements.username.value.trim(); // Obt√©m o valor do campo de entrada de texto "username" e remove espa√ßos em branco do in√≠cio e do final
        const emailInput = elements.email.value.trim(); // Obt√©m o valor do campo de entrada de texto "email" e remove espa√ßos em branco do in√≠cio e do final
    
        if (usernameInput === "" || emailInput == "") {
          showError("Por favor, insira as informa√ß√µes nos campos obrigat√≥rios!."); // Mostra uma mensagem de erro se o campo de entrada de texto estiver vazio
        return;
        }
    
        try {
        const response = await fetch(
            `http://localhost:3000/edit/${usernameInput}/${emailInput}`
          ); // Faz uma requisi√ß√£o HTTP GET para a URL `http://localhost:3000/edit/${usernameInput}/${emailInput}`
          const userData = await response.json(); // Converte a resposta para JSON e armazena os dados na vari√°vel "userData"
    
          elements.textLog.innerHTML = ""; // Limpa o conte√∫do do elemento "textLog"
    
        if (!response.ok) {
            showError("Erro na requisi√ß√£o: Usu√°rio n√£o encontrado!"); // Mostra uma mensagem de erro se a resposta n√£o for bem-sucedida (c√≥digo de status diferente de 2xx)
            console.log(`${response.status} - ${response.statusText}`); // Exibe no console o c√≥digo de status e a mensagem de status da resposta
            return;
        }
    
          showSuccess("Usu√°rio encontrado"); // Mostra uma mensagem de sucesso
        buttonSearch.style.display = 'none'
        buttonSearch.setAttribute('disabled', '')
        buttonRemove.style.display = 'block'
          showAlert('Deseja mesmo remover sua Avalia√ß√£o?'); // Mostra uma mensagem de alerta
        } catch (error) {
        if (error.message === "Failed to fetch") {
            showError(
            "Houve um erro ao buscar suas informa√ß√µes, n√£o √© voc√™, somos n√≥s. üò¢"
            ); // Mostra uma mensagem de erro espec√≠fica para falha na requisi√ß√£o
        } else {
            showError("Houve um erro ao buscar suas informa√ß√µes: " + error); // Mostra uma mensagem de erro gen√©rica para outros erros durante a requisi√ß√£o
        }
        }
    }

    function deleteUser(e) {
        e.preventDefault()

        // Obt√©m os valores do input de usu√°rio e email
        const usernameInput = elements.username.value.trim()
        const emailInput = elements.email.value.trim()

        // Verifica se os campos est√£o vazios
        if(!usernameInput || !emailInput) {
            showError("Por favor, insira as informa√ß√µes nos campos obrigat√≥rios!."); // Mostra uma mensagem de erro se o campo de entrada de texto estiver vazio
            return;
        }
        
        // Faz a requisi√ß√£o DELETE para a API
        fetch(`http://localhost:3000/users/remove_rating/${usernameInput}/${emailInput}`, { method: 'DELETE'})
        .then((response) => {
            if(response.ok) {
                return response.json() // Retorna a resposta como JSON se a requisi√ß√£o for bem-sucedida
            }else if (response.status === 404) { // Lan√ßa um erro personalizado se o usu√°rio n√£o for encontrado (status 404)
                throw new Error('Usu√°rio n√£o encontrado');
            }
            else {
                throw new Error('Erro ao deletar avalia√ß√£o ' + response.statusText); // Lan√ßa um erro com a mensagem de status se a requisi√ß√£o n√£o for bem-sucedida
            }
        })
        .then(handleDeleteSuccess) // Chama a fun√ß√£o para tratar sucesso
        .catch(handleDeleteError); // Chama a fun√ß√£o para tratar erro
    }

    function handleDeleteSuccess(data) {
        elements.textLog2.style.display = 'none';
        showSuccess(data.message); // Exibe a mensagem de sucesso retornada pela API
        elements.buttonRemove.style.display = 'none';
        elements.loginButton.style.display = 'block';
        resetFields();
    }
    
    function handleDeleteError(error) {
        console.error(error);  // Exibe o erro no console para fins de depura√ß√£o
        elements.textLog.style.color = 'red';
        if (error.message === 'Usu√°rio n√£o encontrado') {
            elements.textLog.innerHTML = 'Imposs√≠vel deletar. Usu√°rio n√£o encontrado';
            elements.textLog2.style.display = 'none'
            return
        } else {
            elements.textLog.innerHTML = 'Erro ao deletar avalia√ß√£o, n√£o √© voc√™, somos n√≥s üò¢';
        }
        elements.textLog2.style.display = 'none';
        resetFields();
    }
    
    function resetFields() {
        elements.email.value = "";
        elements.username.value = "";
    }
    
// Adiciona um evento de clique ao bot√£o de busca
elements.buttonSearch.addEventListener("click", searchUser);

// Adiciona um ouvinte de evento de clique ao bot√£o de remover
elements.buttonRemove.addEventListener("click", deleteUser);